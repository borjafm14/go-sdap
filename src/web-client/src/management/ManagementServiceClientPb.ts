/**
 * @fileoverview gRPC-Web generated client stub for management
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.29.0-rc2
// source: management/management.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as google_protobuf_empty_pb from 'google-protobuf/google/protobuf/empty_pb'; // proto import: "google/protobuf/empty.proto"
import * as management_management_pb from '../management/management_pb'; // proto import: "management/management.proto"


export class ManagementClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorConnect = new grpcWeb.MethodDescriptor(
    '/management.Management/Connect',
    grpcWeb.MethodType.UNARY,
    management_management_pb.SessionRequest,
    management_management_pb.SessionResponse,
    (request: management_management_pb.SessionRequest) => {
      return request.serializeBinary();
    },
    management_management_pb.SessionResponse.deserializeBinary
  );

  connect(
    request: management_management_pb.SessionRequest,
    metadata?: grpcWeb.Metadata | null): Promise<management_management_pb.SessionResponse>;

  connect(
    request: management_management_pb.SessionRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: management_management_pb.SessionResponse) => void): grpcWeb.ClientReadableStream<management_management_pb.SessionResponse>;

  connect(
    request: management_management_pb.SessionRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: management_management_pb.SessionResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/management.Management/Connect',
        request,
        metadata || {},
        this.methodDescriptorConnect,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/management.Management/Connect',
    request,
    metadata || {},
    this.methodDescriptorConnect);
  }

  methodDescriptorAuthenticate = new grpcWeb.MethodDescriptor(
    '/management.Management/Authenticate',
    grpcWeb.MethodType.UNARY,
    management_management_pb.AuthenticateRequest,
    management_management_pb.AuthenticateResponse,
    (request: management_management_pb.AuthenticateRequest) => {
      return request.serializeBinary();
    },
    management_management_pb.AuthenticateResponse.deserializeBinary
  );

  authenticate(
    request: management_management_pb.AuthenticateRequest,
    metadata?: grpcWeb.Metadata | null): Promise<management_management_pb.AuthenticateResponse>;

  authenticate(
    request: management_management_pb.AuthenticateRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: management_management_pb.AuthenticateResponse) => void): grpcWeb.ClientReadableStream<management_management_pb.AuthenticateResponse>;

  authenticate(
    request: management_management_pb.AuthenticateRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: management_management_pb.AuthenticateResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/management.Management/Authenticate',
        request,
        metadata || {},
        this.methodDescriptorAuthenticate,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/management.Management/Authenticate',
    request,
    metadata || {},
    this.methodDescriptorAuthenticate);
  }

  methodDescriptorGetUser = new grpcWeb.MethodDescriptor(
    '/management.Management/GetUser',
    grpcWeb.MethodType.UNARY,
    management_management_pb.UserRequest,
    management_management_pb.UserResponse,
    (request: management_management_pb.UserRequest) => {
      return request.serializeBinary();
    },
    management_management_pb.UserResponse.deserializeBinary
  );

  getUser(
    request: management_management_pb.UserRequest,
    metadata?: grpcWeb.Metadata | null): Promise<management_management_pb.UserResponse>;

  getUser(
    request: management_management_pb.UserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: management_management_pb.UserResponse) => void): grpcWeb.ClientReadableStream<management_management_pb.UserResponse>;

  getUser(
    request: management_management_pb.UserRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: management_management_pb.UserResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/management.Management/GetUser',
        request,
        metadata || {},
        this.methodDescriptorGetUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/management.Management/GetUser',
    request,
    metadata || {},
    this.methodDescriptorGetUser);
  }

  methodDescriptorListUsers = new grpcWeb.MethodDescriptor(
    '/management.Management/ListUsers',
    grpcWeb.MethodType.UNARY,
    management_management_pb.ListUsersRequest,
    management_management_pb.ListUsersResponse,
    (request: management_management_pb.ListUsersRequest) => {
      return request.serializeBinary();
    },
    management_management_pb.ListUsersResponse.deserializeBinary
  );

  listUsers(
    request: management_management_pb.ListUsersRequest,
    metadata?: grpcWeb.Metadata | null): Promise<management_management_pb.ListUsersResponse>;

  listUsers(
    request: management_management_pb.ListUsersRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: management_management_pb.ListUsersResponse) => void): grpcWeb.ClientReadableStream<management_management_pb.ListUsersResponse>;

  listUsers(
    request: management_management_pb.ListUsersRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: management_management_pb.ListUsersResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/management.Management/ListUsers',
        request,
        metadata || {},
        this.methodDescriptorListUsers,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/management.Management/ListUsers',
    request,
    metadata || {},
    this.methodDescriptorListUsers);
  }

  methodDescriptorModifyUsers = new grpcWeb.MethodDescriptor(
    '/management.Management/ModifyUsers',
    grpcWeb.MethodType.UNARY,
    management_management_pb.ModifyUsersRequest,
    management_management_pb.ModifyUsersResponse,
    (request: management_management_pb.ModifyUsersRequest) => {
      return request.serializeBinary();
    },
    management_management_pb.ModifyUsersResponse.deserializeBinary
  );

  modifyUsers(
    request: management_management_pb.ModifyUsersRequest,
    metadata?: grpcWeb.Metadata | null): Promise<management_management_pb.ModifyUsersResponse>;

  modifyUsers(
    request: management_management_pb.ModifyUsersRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: management_management_pb.ModifyUsersResponse) => void): grpcWeb.ClientReadableStream<management_management_pb.ModifyUsersResponse>;

  modifyUsers(
    request: management_management_pb.ModifyUsersRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: management_management_pb.ModifyUsersResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/management.Management/ModifyUsers',
        request,
        metadata || {},
        this.methodDescriptorModifyUsers,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/management.Management/ModifyUsers',
    request,
    metadata || {},
    this.methodDescriptorModifyUsers);
  }

  methodDescriptorAddUsers = new grpcWeb.MethodDescriptor(
    '/management.Management/AddUsers',
    grpcWeb.MethodType.UNARY,
    management_management_pb.AddUsersRequest,
    management_management_pb.AddUsersResponse,
    (request: management_management_pb.AddUsersRequest) => {
      return request.serializeBinary();
    },
    management_management_pb.AddUsersResponse.deserializeBinary
  );

  addUsers(
    request: management_management_pb.AddUsersRequest,
    metadata?: grpcWeb.Metadata | null): Promise<management_management_pb.AddUsersResponse>;

  addUsers(
    request: management_management_pb.AddUsersRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: management_management_pb.AddUsersResponse) => void): grpcWeb.ClientReadableStream<management_management_pb.AddUsersResponse>;

  addUsers(
    request: management_management_pb.AddUsersRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: management_management_pb.AddUsersResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/management.Management/AddUsers',
        request,
        metadata || {},
        this.methodDescriptorAddUsers,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/management.Management/AddUsers',
    request,
    metadata || {},
    this.methodDescriptorAddUsers);
  }

  methodDescriptorChangeUsername = new grpcWeb.MethodDescriptor(
    '/management.Management/ChangeUsername',
    grpcWeb.MethodType.UNARY,
    management_management_pb.UsernameRequest,
    management_management_pb.UsernameResponse,
    (request: management_management_pb.UsernameRequest) => {
      return request.serializeBinary();
    },
    management_management_pb.UsernameResponse.deserializeBinary
  );

  changeUsername(
    request: management_management_pb.UsernameRequest,
    metadata?: grpcWeb.Metadata | null): Promise<management_management_pb.UsernameResponse>;

  changeUsername(
    request: management_management_pb.UsernameRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: management_management_pb.UsernameResponse) => void): grpcWeb.ClientReadableStream<management_management_pb.UsernameResponse>;

  changeUsername(
    request: management_management_pb.UsernameRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: management_management_pb.UsernameResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/management.Management/ChangeUsername',
        request,
        metadata || {},
        this.methodDescriptorChangeUsername,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/management.Management/ChangeUsername',
    request,
    metadata || {},
    this.methodDescriptorChangeUsername);
  }

  methodDescriptorChangePassword = new grpcWeb.MethodDescriptor(
    '/management.Management/ChangePassword',
    grpcWeb.MethodType.UNARY,
    management_management_pb.ChangePasswordRequest,
    management_management_pb.ChangePasswordResponse,
    (request: management_management_pb.ChangePasswordRequest) => {
      return request.serializeBinary();
    },
    management_management_pb.ChangePasswordResponse.deserializeBinary
  );

  changePassword(
    request: management_management_pb.ChangePasswordRequest,
    metadata?: grpcWeb.Metadata | null): Promise<management_management_pb.ChangePasswordResponse>;

  changePassword(
    request: management_management_pb.ChangePasswordRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: management_management_pb.ChangePasswordResponse) => void): grpcWeb.ClientReadableStream<management_management_pb.ChangePasswordResponse>;

  changePassword(
    request: management_management_pb.ChangePasswordRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: management_management_pb.ChangePasswordResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/management.Management/ChangePassword',
        request,
        metadata || {},
        this.methodDescriptorChangePassword,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/management.Management/ChangePassword',
    request,
    metadata || {},
    this.methodDescriptorChangePassword);
  }

  methodDescriptorDeleteUsers = new grpcWeb.MethodDescriptor(
    '/management.Management/DeleteUsers',
    grpcWeb.MethodType.UNARY,
    management_management_pb.DeleteUsersRequest,
    management_management_pb.DeleteUsersResponse,
    (request: management_management_pb.DeleteUsersRequest) => {
      return request.serializeBinary();
    },
    management_management_pb.DeleteUsersResponse.deserializeBinary
  );

  deleteUsers(
    request: management_management_pb.DeleteUsersRequest,
    metadata?: grpcWeb.Metadata | null): Promise<management_management_pb.DeleteUsersResponse>;

  deleteUsers(
    request: management_management_pb.DeleteUsersRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: management_management_pb.DeleteUsersResponse) => void): grpcWeb.ClientReadableStream<management_management_pb.DeleteUsersResponse>;

  deleteUsers(
    request: management_management_pb.DeleteUsersRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: management_management_pb.DeleteUsersResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/management.Management/DeleteUsers',
        request,
        metadata || {},
        this.methodDescriptorDeleteUsers,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/management.Management/DeleteUsers',
    request,
    metadata || {},
    this.methodDescriptorDeleteUsers);
  }

  methodDescriptorDisconnect = new grpcWeb.MethodDescriptor(
    '/management.Management/Disconnect',
    grpcWeb.MethodType.UNARY,
    management_management_pb.DisconnectRequest,
    google_protobuf_empty_pb.Empty,
    (request: management_management_pb.DisconnectRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  disconnect(
    request: management_management_pb.DisconnectRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  disconnect(
    request: management_management_pb.DisconnectRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  disconnect(
    request: management_management_pb.DisconnectRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/management.Management/Disconnect',
        request,
        metadata || {},
        this.methodDescriptorDisconnect,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/management.Management/Disconnect',
    request,
    metadata || {},
    this.methodDescriptorDisconnect);
  }

}

