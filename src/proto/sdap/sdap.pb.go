// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.29.0--rc2
// source: sdap.proto

package sdap

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Status int32

const (
	Status_STATUS_OK             Status = 0
	Status_STATUS_ERROR          Status = 1
	Status_STATUS_USER_NOT_FOUND Status = 2
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "STATUS_OK",
		1: "STATUS_ERROR",
		2: "STATUS_USER_NOT_FOUND",
	}
	Status_value = map[string]int32{
		"STATUS_OK":             0,
		"STATUS_ERROR":          1,
		"STATUS_USER_NOT_FOUND": 2,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_sdap_proto_enumTypes[0].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_sdap_proto_enumTypes[0]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_sdap_proto_rawDescGZIP(), []int{0}
}

type Characteristic int32

const (
	Characteristic_COMMON_NAME     Characteristic = 0
	Characteristic_FIRST_NAME      Characteristic = 1
	Characteristic_LAST_NAME       Characteristic = 2
	Characteristic_EMPLOYEE_NUMBER Characteristic = 3
	Characteristic_PHONE_NUMBER    Characteristic = 4
	Characteristic_ADDRESS         Characteristic = 5
	Characteristic_COMPANY_ROLE    Characteristic = 6
	Characteristic_TEAM            Characteristic = 7
	Characteristic_REPORTS_TO      Characteristic = 8
	Characteristic_OTHER           Characteristic = 9
	Characteristic_MEMBER_OF       Characteristic = 10
)

// Enum value maps for Characteristic.
var (
	Characteristic_name = map[int32]string{
		0:  "COMMON_NAME",
		1:  "FIRST_NAME",
		2:  "LAST_NAME",
		3:  "EMPLOYEE_NUMBER",
		4:  "PHONE_NUMBER",
		5:  "ADDRESS",
		6:  "COMPANY_ROLE",
		7:  "TEAM",
		8:  "REPORTS_TO",
		9:  "OTHER",
		10: "MEMBER_OF",
	}
	Characteristic_value = map[string]int32{
		"COMMON_NAME":     0,
		"FIRST_NAME":      1,
		"LAST_NAME":       2,
		"EMPLOYEE_NUMBER": 3,
		"PHONE_NUMBER":    4,
		"ADDRESS":         5,
		"COMPANY_ROLE":    6,
		"TEAM":            7,
		"REPORTS_TO":      8,
		"OTHER":           9,
		"MEMBER_OF":       10,
	}
)

func (x Characteristic) Enum() *Characteristic {
	p := new(Characteristic)
	*p = x
	return p
}

func (x Characteristic) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Characteristic) Descriptor() protoreflect.EnumDescriptor {
	return file_sdap_proto_enumTypes[1].Descriptor()
}

func (Characteristic) Type() protoreflect.EnumType {
	return &file_sdap_proto_enumTypes[1]
}

func (x Characteristic) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Characteristic.Descriptor instead.
func (Characteristic) EnumDescriptor() ([]byte, []int) {
	return file_sdap_proto_rawDescGZIP(), []int{1}
}

type SDAP_ROLE int32

const (
	SDAP_ROLE_ADMINISTRATOR       SDAP_ROLE = 0 // get, post, put, delete
	SDAP_ROLE_MANAGER             SDAP_ROLE = 1 // get all info of every user
	SDAP_ROLE_EMPLOYEE            SDAP_ROLE = 2 // get all info of themselves
	SDAP_ROLE_EMPLOYEE_RESTRICTED SDAP_ROLE = 3 // get basic info of themselves
)

// Enum value maps for SDAP_ROLE.
var (
	SDAP_ROLE_name = map[int32]string{
		0: "ADMINISTRATOR",
		1: "MANAGER",
		2: "EMPLOYEE",
		3: "EMPLOYEE_RESTRICTED",
	}
	SDAP_ROLE_value = map[string]int32{
		"ADMINISTRATOR":       0,
		"MANAGER":             1,
		"EMPLOYEE":            2,
		"EMPLOYEE_RESTRICTED": 3,
	}
)

func (x SDAP_ROLE) Enum() *SDAP_ROLE {
	p := new(SDAP_ROLE)
	*p = x
	return p
}

func (x SDAP_ROLE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SDAP_ROLE) Descriptor() protoreflect.EnumDescriptor {
	return file_sdap_proto_enumTypes[2].Descriptor()
}

func (SDAP_ROLE) Type() protoreflect.EnumType {
	return &file_sdap_proto_enumTypes[2]
}

func (x SDAP_ROLE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SDAP_ROLE.Descriptor instead.
func (SDAP_ROLE) EnumDescriptor() ([]byte, []int) {
	return file_sdap_proto_rawDescGZIP(), []int{2}
}

type ChangePasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token       string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Username    string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	OldPassword string `protobuf:"bytes,3,opt,name=old_password,json=oldPassword,proto3" json:"old_password,omitempty"`
	NewPassword string `protobuf:"bytes,4,opt,name=new_password,json=newPassword,proto3" json:"new_password,omitempty"`
}

func (x *ChangePasswordRequest) Reset() {
	*x = ChangePasswordRequest{}
	mi := &file_sdap_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangePasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePasswordRequest) ProtoMessage() {}

func (x *ChangePasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdap_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePasswordRequest.ProtoReflect.Descriptor instead.
func (*ChangePasswordRequest) Descriptor() ([]byte, []int) {
	return file_sdap_proto_rawDescGZIP(), []int{0}
}

func (x *ChangePasswordRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ChangePasswordRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ChangePasswordRequest) GetOldPassword() string {
	if x != nil {
		return x.OldPassword
	}
	return ""
}

func (x *ChangePasswordRequest) GetNewPassword() string {
	if x != nil {
		return x.NewPassword
	}
	return ""
}

type ChangePasswordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=sdap.Status" json:"status,omitempty"`
}

func (x *ChangePasswordResponse) Reset() {
	*x = ChangePasswordResponse{}
	mi := &file_sdap_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangePasswordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePasswordResponse) ProtoMessage() {}

func (x *ChangePasswordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdap_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePasswordResponse.ProtoReflect.Descriptor instead.
func (*ChangePasswordResponse) Descriptor() ([]byte, []int) {
	return file_sdap_proto_rawDescGZIP(), []int{1}
}

func (x *ChangePasswordResponse) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_STATUS_OK
}

type AuthenticateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token    string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *AuthenticateRequest) Reset() {
	*x = AuthenticateRequest{}
	mi := &file_sdap_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthenticateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateRequest) ProtoMessage() {}

func (x *AuthenticateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdap_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateRequest.ProtoReflect.Descriptor instead.
func (*AuthenticateRequest) Descriptor() ([]byte, []int) {
	return file_sdap_proto_rawDescGZIP(), []int{2}
}

func (x *AuthenticateRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *AuthenticateRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AuthenticateRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type AuthenticateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User   *User  `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Status Status `protobuf:"varint,2,opt,name=status,proto3,enum=sdap.Status" json:"status,omitempty"`
}

func (x *AuthenticateResponse) Reset() {
	*x = AuthenticateResponse{}
	mi := &file_sdap_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthenticateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateResponse) ProtoMessage() {}

func (x *AuthenticateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdap_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateResponse.ProtoReflect.Descriptor instead.
func (*AuthenticateResponse) Descriptor() ([]byte, []int) {
	return file_sdap_proto_rawDescGZIP(), []int{3}
}

func (x *AuthenticateResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *AuthenticateResponse) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_STATUS_OK
}

type CharacteristicsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token           string           `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Username        string           `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Characteristics []Characteristic `protobuf:"varint,3,rep,packed,name=characteristics,proto3,enum=sdap.Characteristic" json:"characteristics,omitempty"`
}

func (x *CharacteristicsRequest) Reset() {
	*x = CharacteristicsRequest{}
	mi := &file_sdap_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CharacteristicsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacteristicsRequest) ProtoMessage() {}

func (x *CharacteristicsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdap_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacteristicsRequest.ProtoReflect.Descriptor instead.
func (*CharacteristicsRequest) Descriptor() ([]byte, []int) {
	return file_sdap_proto_rawDescGZIP(), []int{4}
}

func (x *CharacteristicsRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *CharacteristicsRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *CharacteristicsRequest) GetCharacteristics() []Characteristic {
	if x != nil {
		return x.Characteristics
	}
	return nil
}

type CharacteristicsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User   *User  `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Status Status `protobuf:"varint,2,opt,name=status,proto3,enum=sdap.Status" json:"status,omitempty"`
}

func (x *CharacteristicsResponse) Reset() {
	*x = CharacteristicsResponse{}
	mi := &file_sdap_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CharacteristicsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacteristicsResponse) ProtoMessage() {}

func (x *CharacteristicsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdap_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacteristicsResponse.ProtoReflect.Descriptor instead.
func (*CharacteristicsResponse) Descriptor() ([]byte, []int) {
	return file_sdap_proto_rawDescGZIP(), []int{5}
}

func (x *CharacteristicsResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *CharacteristicsResponse) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_STATUS_OK
}

type MemberOfRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token    string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *MemberOfRequest) Reset() {
	*x = MemberOfRequest{}
	mi := &file_sdap_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemberOfRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberOfRequest) ProtoMessage() {}

func (x *MemberOfRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdap_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberOfRequest.ProtoReflect.Descriptor instead.
func (*MemberOfRequest) Descriptor() ([]byte, []int) {
	return file_sdap_proto_rawDescGZIP(), []int{6}
}

func (x *MemberOfRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *MemberOfRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type MemberOfResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberOf []string `protobuf:"bytes,1,rep,name=memberOf,proto3" json:"memberOf,omitempty"`
	Status   Status   `protobuf:"varint,2,opt,name=status,proto3,enum=sdap.Status" json:"status,omitempty"`
}

func (x *MemberOfResponse) Reset() {
	*x = MemberOfResponse{}
	mi := &file_sdap_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemberOfResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberOfResponse) ProtoMessage() {}

func (x *MemberOfResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdap_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberOfResponse.ProtoReflect.Descriptor instead.
func (*MemberOfResponse) Descriptor() ([]byte, []int) {
	return file_sdap_proto_rawDescGZIP(), []int{7}
}

func (x *MemberOfResponse) GetMemberOf() []string {
	if x != nil {
		return x.MemberOf
	}
	return nil
}

func (x *MemberOfResponse) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_STATUS_OK
}

type DisconnectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *DisconnectRequest) Reset() {
	*x = DisconnectRequest{}
	mi := &file_sdap_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisconnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectRequest) ProtoMessage() {}

func (x *DisconnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdap_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectRequest.ProtoReflect.Descriptor instead.
func (*DisconnectRequest) Descriptor() ([]byte, []int) {
	return file_sdap_proto_rawDescGZIP(), []int{8}
}

func (x *DisconnectRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type SessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
}

func (x *SessionRequest) Reset() {
	*x = SessionRequest{}
	mi := &file_sdap_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionRequest) ProtoMessage() {}

func (x *SessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdap_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionRequest.ProtoReflect.Descriptor instead.
func (*SessionRequest) Descriptor() ([]byte, []int) {
	return file_sdap_proto_rawDescGZIP(), []int{9}
}

func (x *SessionRequest) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

type SessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token  string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Status Status `protobuf:"varint,2,opt,name=status,proto3,enum=sdap.Status" json:"status,omitempty"`
}

func (x *SessionResponse) Reset() {
	*x = SessionResponse{}
	mi := &file_sdap_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionResponse) ProtoMessage() {}

func (x *SessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdap_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionResponse.ProtoReflect.Descriptor instead.
func (*SessionResponse) Descriptor() ([]byte, []int) {
	return file_sdap_proto_rawDescGZIP(), []int{10}
}

func (x *SessionResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *SessionResponse) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_STATUS_OK
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username        string            `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password        *string           `protobuf:"bytes,2,opt,name=password,proto3,oneof" json:"password,omitempty"`
	SdapRole        *SDAP_ROLE        `protobuf:"varint,3,opt,name=sdap_role,json=sdapRole,proto3,enum=sdap.SDAP_ROLE,oneof" json:"sdap_role,omitempty"`
	CommonName      *string           `protobuf:"bytes,4,opt,name=common_name,json=commonName,proto3,oneof" json:"common_name,omitempty"`
	FirstName       *string           `protobuf:"bytes,5,opt,name=first_name,json=firstName,proto3,oneof" json:"first_name,omitempty"`
	LastName        *string           `protobuf:"bytes,6,opt,name=last_name,json=lastName,proto3,oneof" json:"last_name,omitempty"`
	EmployeeNumber  *string           `protobuf:"bytes,7,opt,name=employee_number,json=employeeNumber,proto3,oneof" json:"employee_number,omitempty"`
	PhoneNumber     *string           `protobuf:"bytes,8,opt,name=phone_number,json=phoneNumber,proto3,oneof" json:"phone_number,omitempty"`
	Address         *string           `protobuf:"bytes,9,opt,name=address,proto3,oneof" json:"address,omitempty"`
	CompanyRole     *string           `protobuf:"bytes,10,opt,name=company_role,json=companyRole,proto3,oneof" json:"company_role,omitempty"`
	Team            *string           `protobuf:"bytes,11,opt,name=team,proto3,oneof" json:"team,omitempty"`
	ReportsTo       *string           `protobuf:"bytes,12,opt,name=reports_to,json=reportsTo,proto3,oneof" json:"reports_to,omitempty"`
	Characteristics map[string]string `protobuf:"bytes,13,rep,name=characteristics,proto3" json:"characteristics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MemberOf        []string          `protobuf:"bytes,14,rep,name=member_of,json=memberOf,proto3" json:"member_of,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	mi := &file_sdap_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_sdap_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_sdap_proto_rawDescGZIP(), []int{11}
}

func (x *User) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *User) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *User) GetSdapRole() SDAP_ROLE {
	if x != nil && x.SdapRole != nil {
		return *x.SdapRole
	}
	return SDAP_ROLE_ADMINISTRATOR
}

func (x *User) GetCommonName() string {
	if x != nil && x.CommonName != nil {
		return *x.CommonName
	}
	return ""
}

func (x *User) GetFirstName() string {
	if x != nil && x.FirstName != nil {
		return *x.FirstName
	}
	return ""
}

func (x *User) GetLastName() string {
	if x != nil && x.LastName != nil {
		return *x.LastName
	}
	return ""
}

func (x *User) GetEmployeeNumber() string {
	if x != nil && x.EmployeeNumber != nil {
		return *x.EmployeeNumber
	}
	return ""
}

func (x *User) GetPhoneNumber() string {
	if x != nil && x.PhoneNumber != nil {
		return *x.PhoneNumber
	}
	return ""
}

func (x *User) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *User) GetCompanyRole() string {
	if x != nil && x.CompanyRole != nil {
		return *x.CompanyRole
	}
	return ""
}

func (x *User) GetTeam() string {
	if x != nil && x.Team != nil {
		return *x.Team
	}
	return ""
}

func (x *User) GetReportsTo() string {
	if x != nil && x.ReportsTo != nil {
		return *x.ReportsTo
	}
	return ""
}

func (x *User) GetCharacteristics() map[string]string {
	if x != nil {
		return x.Characteristics
	}
	return nil
}

func (x *User) GetMemberOf() []string {
	if x != nil {
		return x.MemberOf
	}
	return nil
}

var File_sdap_proto protoreflect.FileDescriptor

var file_sdap_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x73, 0x64, 0x61, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x73, 0x64,
	0x61, 0x70, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x8f, 0x01, 0x0a, 0x15, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6f,
	0x6c, 0x64, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6f, 0x6c, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x22, 0x3e, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x73, 0x64,
	0x61, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x63, 0x0a, 0x13, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x5c, 0x0a, 0x14, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x73,
	0x64, 0x61, 0x70, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x24,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x73, 0x64, 0x61, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x3e, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x73, 0x64, 0x61,
	0x70, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x52, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x22, 0x5f, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x73, 0x64, 0x61,
	0x70, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x73,
	0x64, 0x61, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x43, 0x0a, 0x0f, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x54, 0x0a, 0x10, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x4f, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x12, 0x24, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x73, 0x64, 0x61, 0x70, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x29, 0x0a,
	0x11, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x2c, 0x0a, 0x0e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4d, 0x0a, 0x0f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x24, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x73, 0x64, 0x61, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x8a, 0x06, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x09, 0x73,
	0x64, 0x61, 0x70, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x73, 0x64, 0x61, 0x70, 0x2e, 0x53, 0x44, 0x41, 0x50, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x48,
	0x01, 0x52, 0x08, 0x73, 0x64, 0x61, 0x70, 0x52, 0x6f, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x08, 0x6c,
	0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x65, 0x6d,
	0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0e, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06,
	0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x1d, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x07, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x52, 0x6f, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x54,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x73, 0x64, 0x61, 0x70, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f,
	0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x1a, 0x42, 0x0a, 0x14,
	0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x73, 0x64, 0x61, 0x70, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x65, 0x6d, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74,
	0x65, 0x61, 0x6d, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f,
	0x74, 0x6f, 0x2a, 0x44, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x0a, 0x09,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x19, 0x0a,
	0x15, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x2a, 0xba, 0x01, 0x0a, 0x0e, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x0f, 0x0a, 0x0b, 0x43,
	0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09,
	0x4c, 0x41, 0x53, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x45,
	0x4d, 0x50, 0x4c, 0x4f, 0x59, 0x45, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x03,
	0x12, 0x10, 0x0a, 0x0c, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52,
	0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x05, 0x12,
	0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x4e, 0x59, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x10,
	0x06, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x41, 0x4d, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x52,
	0x45, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x5f, 0x54, 0x4f, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52,
	0x5f, 0x4f, 0x46, 0x10, 0x0a, 0x2a, 0x52, 0x0a, 0x09, 0x53, 0x44, 0x41, 0x50, 0x5f, 0x52, 0x4f,
	0x4c, 0x45, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x49, 0x53, 0x54, 0x52, 0x41,
	0x54, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x4d, 0x50, 0x4c, 0x4f, 0x59, 0x45, 0x45, 0x10, 0x02,
	0x12, 0x17, 0x0a, 0x13, 0x45, 0x4d, 0x50, 0x4c, 0x4f, 0x59, 0x45, 0x45, 0x5f, 0x52, 0x45, 0x53,
	0x54, 0x52, 0x49, 0x43, 0x54, 0x45, 0x44, 0x10, 0x03, 0x32, 0xb3, 0x03, 0x0a, 0x09, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x12, 0x14, 0x2e, 0x73, 0x64, 0x61, 0x70, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x73, 0x64, 0x61, 0x70, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x47, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x12, 0x19, 0x2e, 0x73, 0x64, 0x61, 0x70, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x73,
	0x64, 0x61, 0x70, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x12, 0x1c, 0x2e, 0x73, 0x64, 0x61, 0x70, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x73, 0x64, 0x61, 0x70, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x3e, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x12, 0x15,
	0x2e, 0x73, 0x64, 0x61, 0x70, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x73, 0x64, 0x61, 0x70, 0x2e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x4d, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x1b, 0x2e, 0x73, 0x64, 0x61, 0x70, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c,
	0x2e, 0x73, 0x64, 0x61, 0x70, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f,
	0x0a, 0x0a, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x17, 0x2e, 0x73,
	0x64, 0x61, 0x70, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42,
	0x0e, 0x5a, 0x0c, 0x67, 0x6f, 0x2d, 0x73, 0x64, 0x61, 0x70, 0x2f, 0x73, 0x64, 0x61, 0x70, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sdap_proto_rawDescOnce sync.Once
	file_sdap_proto_rawDescData = file_sdap_proto_rawDesc
)

func file_sdap_proto_rawDescGZIP() []byte {
	file_sdap_proto_rawDescOnce.Do(func() {
		file_sdap_proto_rawDescData = protoimpl.X.CompressGZIP(file_sdap_proto_rawDescData)
	})
	return file_sdap_proto_rawDescData
}

var file_sdap_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_sdap_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_sdap_proto_goTypes = []any{
	(Status)(0),                     // 0: sdap.Status
	(Characteristic)(0),             // 1: sdap.Characteristic
	(SDAP_ROLE)(0),                  // 2: sdap.SDAP_ROLE
	(*ChangePasswordRequest)(nil),   // 3: sdap.ChangePasswordRequest
	(*ChangePasswordResponse)(nil),  // 4: sdap.ChangePasswordResponse
	(*AuthenticateRequest)(nil),     // 5: sdap.AuthenticateRequest
	(*AuthenticateResponse)(nil),    // 6: sdap.AuthenticateResponse
	(*CharacteristicsRequest)(nil),  // 7: sdap.CharacteristicsRequest
	(*CharacteristicsResponse)(nil), // 8: sdap.CharacteristicsResponse
	(*MemberOfRequest)(nil),         // 9: sdap.MemberOfRequest
	(*MemberOfResponse)(nil),        // 10: sdap.MemberOfResponse
	(*DisconnectRequest)(nil),       // 11: sdap.DisconnectRequest
	(*SessionRequest)(nil),          // 12: sdap.SessionRequest
	(*SessionResponse)(nil),         // 13: sdap.SessionResponse
	(*User)(nil),                    // 14: sdap.User
	nil,                             // 15: sdap.User.CharacteristicsEntry
	(*emptypb.Empty)(nil),           // 16: google.protobuf.Empty
}
var file_sdap_proto_depIdxs = []int32{
	0,  // 0: sdap.ChangePasswordResponse.status:type_name -> sdap.Status
	14, // 1: sdap.AuthenticateResponse.user:type_name -> sdap.User
	0,  // 2: sdap.AuthenticateResponse.status:type_name -> sdap.Status
	1,  // 3: sdap.CharacteristicsRequest.characteristics:type_name -> sdap.Characteristic
	14, // 4: sdap.CharacteristicsResponse.user:type_name -> sdap.User
	0,  // 5: sdap.CharacteristicsResponse.status:type_name -> sdap.Status
	0,  // 6: sdap.MemberOfResponse.status:type_name -> sdap.Status
	0,  // 7: sdap.SessionResponse.status:type_name -> sdap.Status
	2,  // 8: sdap.User.sdap_role:type_name -> sdap.SDAP_ROLE
	15, // 9: sdap.User.characteristics:type_name -> sdap.User.CharacteristicsEntry
	12, // 10: sdap.Operation.Connect:input_type -> sdap.SessionRequest
	5,  // 11: sdap.Operation.Authenticate:input_type -> sdap.AuthenticateRequest
	7,  // 12: sdap.Operation.GetCharacteristics:input_type -> sdap.CharacteristicsRequest
	9,  // 13: sdap.Operation.GetMemberOf:input_type -> sdap.MemberOfRequest
	3,  // 14: sdap.Operation.ChangePassword:input_type -> sdap.ChangePasswordRequest
	11, // 15: sdap.Operation.Disconnect:input_type -> sdap.DisconnectRequest
	13, // 16: sdap.Operation.Connect:output_type -> sdap.SessionResponse
	6,  // 17: sdap.Operation.Authenticate:output_type -> sdap.AuthenticateResponse
	8,  // 18: sdap.Operation.GetCharacteristics:output_type -> sdap.CharacteristicsResponse
	10, // 19: sdap.Operation.GetMemberOf:output_type -> sdap.MemberOfResponse
	4,  // 20: sdap.Operation.ChangePassword:output_type -> sdap.ChangePasswordResponse
	16, // 21: sdap.Operation.Disconnect:output_type -> google.protobuf.Empty
	16, // [16:22] is the sub-list for method output_type
	10, // [10:16] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_sdap_proto_init() }
func file_sdap_proto_init() {
	if File_sdap_proto != nil {
		return
	}
	file_sdap_proto_msgTypes[11].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sdap_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sdap_proto_goTypes,
		DependencyIndexes: file_sdap_proto_depIdxs,
		EnumInfos:         file_sdap_proto_enumTypes,
		MessageInfos:      file_sdap_proto_msgTypes,
	}.Build()
	File_sdap_proto = out.File
	file_sdap_proto_rawDesc = nil
	file_sdap_proto_goTypes = nil
	file_sdap_proto_depIdxs = nil
}
